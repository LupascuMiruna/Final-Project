# import speech_recognition as sr
# import socketio

# sio = socketio.Client()

# @sio.event
# def connect():
#     print('connection established')

# @sio.event
# def disconnect():
#     print('disconnected from server')
#     sio.disconnect()

# class Listener:
#     def __init__(self):
#         self.sio = sio
#         self.sio.connect('http://localhost:3001')

#     def continue_listening(self, data):
#         return not 'finish' in list(map(lambda sentence: sentence.lower(), data)) and self.should_continue

#     # toDo verify microphone !!
#     def speech_to_text(self):
#         r = sr.Recognizer()

#         with sr.Microphone() as source:
#             # read the audio data from the default microphone
#             recognition_response = []
            
#             print("Start recording...")
#             r.adjust_for_ambient_noise(source)
#             audio_data = r.listen(source, phrase_time_limit=10)
#             print("Recognizing...")
#             recognition_response = r.recognize_google(
#                 audio_data, language="en-US", show_all=True)
#             if len(recognition_response) != 0:
#                 recognition_response = list(map(
#                     lambda alternative: alternative['transcript'], recognition_response['alternative']))
#                 return recognition_response
            
#             return []

#     def run_listener(self):
#         alternatives = []
#         self.should_continue = True

#         while (self.continue_listening(alternatives)):

#             alternatives = self.speech_to_text()
#             if alternatives is not None:
#                 print(alternatives)
#                 self.sio.emit('onCommand', {'alternatives': alternatives})
#         # self.sio.wait()

#     def stop_listener(self):
#         self.should_continue = False
